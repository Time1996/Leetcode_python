Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

Idea: Solution.max = max(solve(root), solve(root.left), solve(root.right), max(root.val, ml + root.val + mr))

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        
        if root == None:
            return 0
        Solution.maxsum = root.val
        def solve(root):
            if root == None:
                return 0
            sum_, l, r = root.val, 0, 0
            if root.left:
                l = solve(root.left)
                if l > 0: sum_ += l
            if root.right:
                r = solve(root.right)
                if r > 0: sum_ += r
            Solution.maxsum = max(Solution.maxsum, sum_)
            return max(root.val, max(root.val + l, root.val + r))
        solve(root)
        return Solution.maxsum
        
        
        
Other Solution Idea: DFS
       
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.res = -100000
        self.dfs(root)
        return self.res
        
    def dfs(self, root):
        if not root:
            return 0
        left = max(0, self.dfs(root.left))
        right = max(0, self.dfs(root.right))
        self.res = max(self.res, left + right + root.val)
        return root.val + max(left, right)
